파이썬이 최근에 주목받는 이유 중 하나가 바로 데이터 분석을 위한 다양한 패키지를 제공한다는 점입니다.
데이터 분석을 위해 정교하게 만들어진 통계 패키지를 사용하면 사업계획서를 위한 재무 자료 분석부터 경제적 자유를 이우기 위한 주식 및 부동산 자료 분석까지 직접해 볼 수 있습니다. 
이 장에서는 대표적인 파이썬 패키지인 넘파이, 판다스 , 맷플롯립을 활용해 데이터 분석을 해 보겠습니다.

05-1 데이터 분석 패키지 준비하기
05-2 넘파이로 배열 다루기
05-3 넘파이로 사업성 분석하기
05-4 판다스로 데이터프레임 만들기
05-5 판다스로 통계 데이터 다루기
05-6 실전 통계 분석 맛보기
05-7 맷플롯립으로 그래프 그리기

05-1 데이터 분석 패키지 준비하기

파이썬의 다양한 패키지를 사용하면 다른 데이터 분석 프로그램 못지않게 분석이 가능합니다. 하지만 파이썬 자체가 데이터 분석 프로그램은 아닙니다. 그래서 목적에 맞는 패키지를 따로 설치해야 합니다. 다음은 대표적인 파이썬 데이터 분석 패키지입니다.
┌───────────────────┬───────────────────────────┬───────────────────────┐
│ 패키지				│ 기능     					│ 주요함수					│
├───────────────────┼───────────────────────────┼───────────────────────┤
│ 넘파이(numpy)		│ 배열 계산 기능, 반올림, 버리기 기능	│ floor, ceil, power	│
├───────────────────┼───────────────────────────┼───────────────────────┤
│ 판다스(pandas)		│ 데이터프레임으로 데이터 입력, 가공	│ describe, groupby		│
├───────────────────┼───────────────────────────┼───────────────────────┤
│ 맷플롯립(matplotlib) │ 그래프 그리그					│ plot, hist, bar		│
└───────────────────┴───────────────────────────┴───────────────────────┘

이들 패키지 말고도 math(수학), scipy(통계 분석), statsmodels(통계 모델 작성 및 분석) 등 데이터 분석을 위한 파잌썬 패키지는 많이 있습니다. 그리고 이런 패키지의 사용 방법은 하나의 책으로 담기 어려울 정도로 다양합니다. 따라서 이 책에서는 여러분이 실제로 맞닥뜨릴 수 있는 상황을 중심으로 그 사용번을 간단히 알아보겠습니다.

데이터 분석 패키지 설치하기

아나콘다를 통해서 파이썬을 설치했다면 이미 넘파이, 판다스 , 맷플롯립이 기본적으로 설치되어 있습니다. 처음에 아나콘다를 설치하라고 추천한 이유가 여기에 있습니다. 기본적인 패키지가 모두 설치되어 있어서 이 패키지들을 굳이 따로 설치하지 않아도 되기 때문이죠.

패키지가 설치되어 있지 않다면 다으모가 같이 입력해서 설치하세요. 명령 프롬프트에서 파이썬 실행 위치로 이동한 다음 pip 명열을 입력하면 패키지가 설치됩니다.

C:\User\user\> pip install numpy
# 이처럼 필요한 패키지 이름을 직접 pip 로 설치하는 방법도 있습니다.

마찬가지로 판다스, 맷플롯립과 같은 다른 패키지를 설치하고 싶다면 다으모가 같이 입력합니다.
C:\User\user\> pip install pandas
C:\User\user\> pip install matplotlib


05-2 넘파이로 배열 다루기 == 05-1.py 참고

넘파이는 배열(array)을 다루는 도구이며 숫자로 된 큰 배열 데이터를 다룰 때 진가를 발휘합니다. 예를 들어 엄청나게 많은 데이터 중에서 700이 넘는 숫자만 찾아서 참(True)으로 반환하거나, 특정한 행이나 열에 있는 정보만 반올림하거나 버림하기도 쉽습니다. 또한 복잡한 배열 연산도 가능합니다.

이 절의 목적은 다른 절과 마찬가지로 넘파이의 기능을 정복하는 데 있지 않습니다. 넘파이의 기능을 설명하는 포스팅이나 책은 무궁무진합니다. 당장 구글에 'python numpy'라고만 검색해도 수많은 컴퓨터 전공자, 프로그래머의 엄청난 블로그들이 확인됩니다. 따라서 이 책의 역활은 넘파이의 기능 모두를 설명하는 것이 아니라, 주변에서 흔히 접하는 어떤 문제를 넘파이로 해결할 수 있음을 보여주는 데 있습니다.

자, 그럼 시작해 보겠습니다.

넘파이로 배열 정의하기

뱌열을 표현하기 위해 먼저 넘파이를 임포트 합니다.
┌────────────────────────────────────────────────────────────────────────────┐
│   >>> import numpy as np  # 넘파이를 불러올 때 보통 np로 줄여서 표현합니다.   │
└────────────────────────────────────────────────────────────────────────────┘

넘파이를 불러올 때 np로 줄여서 표현합니다. 이렇게 표현하지 않아도 상관없지만, 정말 많은 책과 포스팅에서 넘파이를 np라고 줄여서 사용하기 때문에 이렇게 사용하는 것을 추천합니다.

넘파이는 기본적으로 '배열'을 표현하기 위한 패키지입니다. 이를 사용해 2차원 배열을 만들어 보겠습니다.

┌───────────────────────────────────────────────────────────────────────────────┐
│   >>> a = np.array([2,3],[5,2])                                               │
│   # np.array는 배열을 정의하는 명령입니다. 첫 번째 행부터 리스트로 입력합니다.    │
│                                                                               │
│   >>> a                                                                       │
│   # 배열이 정상적으로 입력되었습니다.                                           │
└───────────────────────────────────────────────────────────────────────────────┘

넘파이의 배열은 지금까지 다뤘던 CSV형 리스트와 아주 비슷한 형태입니다. 앞에서 만든 2차원 배열을 그림으로 표현하면 다음과 같습니다.

        2열
    ┌───┬───┐
    │ 2 │ 3 │
2행 ├───┼───┤
    │ 5 │ 2 │
    └───┴───┘

배열 스라이싱 하기

넘파이의 스라이싱 기능은 리스트의 스라이싱 기느오가 유사하지만 숫자를 다루는 데 더 특화되어 있으며 수를 다룰 때 강력합니다. 2차원 배열을 새로 만들겠습니다.

┌───────────────────────────────────────────────────────────────────────────────┐
│   >>> d = np.array([1, 2, 3, 4, 5],[2, 4, 5, 6, 7],[5, 7, 8, 9, 9])           │
│   # 3 x 5 배열을 만들어 d에 저장합니다.                                        │
│                                                                               │
│   >>> d                                                                       │
│   array(  [1, 2, 3, 4, 5],                                                    │
│           [2, 4, 5, 6, 7],                                                    │
│           [5, 7, 8, 9, 9])                                                    │
└───────────────────────────────────────────────────────────────────────────────┘

슬라이싱 기능을 사용하려면 각 원소의 인덱스를 알아야 합니다. 이 다차원 배열의 인덱스는 다음과 같습니다. 앞서 다뤘던 CSV형 자료의 인덱스가 넘파이에서 동일하게 매겨집니다.
    
┌───────────────────────────────────────────────────┐
│       d[0][0]          d[0][1]     d[0][-1]       │
│            ↖       ↗           ↗                │
│   array(  [【1】, 【2】, 3, 4, 【5】],             │
│       ↙  [【2】, 4, 5,   【6, 7】],    d[1:,3:]   │
│   d[1][0] [5, 7, 8,       【9, 9】])  ↗           │
└───────────────────────────────────────────────────┘

즉, 넘파이로 배열을 표현할 떄 첫 번째 인덱스는 행, 두 번째 인덱스는 열을 가리킵니다. 예를 들어 앞 그림에서 볼때 d[2][4]라고 한다면, 3번째 행, 5번째 열을 가리키는 셈입니다.

┌───────────────────────────────────────────────────────────────────────────────────────────────────┐
│   >>> d[1][2]                                                                                     │
│   5             # d[1][2]를 행렬식으로 표현하면 [d오른쪽아래에 작은크기로 23] 에 해당하는 수입니다.   │
│   >>> d[1, 2]                                                                                     │
│   5             # 이처럼 표현할 수도 있습니다.                                                      │
│   >>> d[1:, 3:]                                                                                   │
│   array([6, 7], # 1행 다음, 3열 다음 수만 슬라이싱 했습니다.                                        │
│         [9, 9])                                                                                   │
└───────────────────────────────────────────────────────────────────────────────────────────────────┘

배열의 크기 알아내기: shape
배열의 크기느 ㄴ배열이 몇 개의 행과 열을 가졌는지를 의마합니다. 앞에서 보았던 배열 d는 3X5 배열이라고 표현합니다. 파이썬에서는 3X5를(3, 5)라고 표현하고요. d.shape라고 입력하면 배열 d의 크기를 알 수 있습니다.

